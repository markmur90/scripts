eres un ingeniero en prompt, para lo cual mejorar√°s el siguiente prompt para mi haciendo lo mas completo.

Eres un ingeniero en sistemas, redes y seguridad, con django sin rest.

vas a refactorizar para realizar transferencias con conexion_banco_refactor.py para lo cual modificar√°s views, utils, templates de api/gpt4, teniendo en cuenta el oficial bancario que obtiene el token con usuario y contrase√±a, realizar el challenge para el otp, y esperar la respuesta del simulador para el status, para lo cual crear√°s nuevas plantillas que cumplan con los requerimientos, vas a revisar todo el procedimiento ya incluido para implementar en tu proceso sin omitir ning√∫n campo ya establecido, adaptar√°s la l√≥gica a lo ya establecido en las views con el def send_transfer_view.

vas a tomar en cuenta las siguientes rutas del simulador:
URL_TOKEN="api/token"
URL_LOGIN="api/login"
URL_CHALLENGE="api/challenge"
URL_TRANSFER_ENTRANTES="api/transferencias/entrantes"
URL_SEND_TRANSFER="api/send-transfer"
URL_STATUS_TRANSFER="api/status-transfer"

importante:
Debes aplicar para que simule el dns, autentique en el simulador como oficial y obtenga ip del servidor.
Para las templates debes aplicar el dise√±o ya implementado en el proyecto


Eres un ingeniero en sistemas, redes y seguridad  con experiencia en desarrollo backend utilizando Django (sin REST Framework) . 

Tu tarea es realizar un refactor completo del flujo de transferencias bancarias  dentro del proyecto actual. Para ello, trabajar√°s principalmente sobre los siguientes archivos: 

    views.py  
    utils.py  
    Plantillas HTML dentro de api/gpt4/
     

Adem√°s, deber√°s integrar y utilizar el archivo conexion_banco_refactor.py, que contiene la l√≥gica refactorizada de conexi√≥n al sistema bancario oficial. 
üéØ Objetivo General 

Implementar un flujo seguro y funcional para realizar transferencias bancarias salientes  desde la aplicaci√≥n Django, siguiendo estos pasos: 

    Obtenci√≥n del token de acceso  
        Usar: URL_TOKEN = "api/token"
        Autenticar con usuario y contrase√±a del banco.
        Guardar el token para usarlo en las siguientes llamadas.
         

    Login con token  
        Usar: URL_LOGIN = "api/login"
        Enviar el token obtenido previamente.
         

    Challenge OTP  
        Usar: URL_CHALLENGE = "api/challenge"
        Recibir un challenge del sistema bancario.
        Mostrar un formulario en una nueva plantilla HTML para que el usuario ingrese el OTP.
        Enviar respuesta del challenge.
         

    Env√≠o de transferencia  
        Usar: URL_SEND_TRANSFER = "api/send-transfer"
        Enviar datos de la transferencia con autenticaci√≥n completa.
         

    Consulta de estado de la transferencia  
        Usar: URL_STATUS_TRANSFER = "api/status-transfer"
        Verificar el estado de la operaci√≥n tras su env√≠o.
         

    Visualizaci√≥n de transferencias entrantes (opcional)  
        Usar: URL_TRANSFER_ENTRANTES = "api/transferencias/entrantes"
         
     

üß± Requerimientos t√©cnicos 

    No usar Django REST Framework , mantener el estilo actual basado en vistas tradicionales y templates.
    Crear nuevas plantillas HTML en la carpeta api/gpt4/ para:
        Formulario de ingreso de OTP (challenge).
        Confirmaci√≥n de env√≠o de transferencia.
        Vista de estado final de la operaci√≥n.
         
    Mantener buenas pr√°cticas de seguridad:
        Uso de sesiones seguras para almacenar tokens temporales.
        Validaciones de entrada de datos.
        Manejo de errores y mensajes claros al usuario.
         
     

üîÅ Flujo esperado 

    El usuario inicia sesi√≥n en la app Django.
    Ingresa los datos de la transferencia.
    Se inicia el proceso de autenticaci√≥n con el banco:
        Obtener token ‚Üí login ‚Üí challenge OTP.
         
    Tras resolver el challenge, se env√≠a la transferencia.
    Se consulta el estado de la transacci√≥n hasta obtener confirmaci√≥n.
    Se muestra el resultado final al usuario mediante una nueva plantilla.
     

üìå Notas adicionales 

    Todo el c√≥digo debe estar bien documentado.
    Si hay funciones auxiliares, colocarlas en utils.py.
    Mantener consistencia con el estilo del proyecto existente.
    





Eres un ingeniero en sistemas, redes y seguridad con experiencia en desarrollo backend usando Django (sin REST Framework), enfocado en integrar procesos bancarios seguros. 
Tu tarea es refactorizar el proceso de transferencias  utilizando el archivo conexion_banco_refactor.py. Deber√°s modificar los siguientes componentes dentro del m√≥dulo api/gpt4: 
    Views : Actualizar la l√≥gica existente, especialmente en la funci√≥n send_transfer_view.
    Utils : Reutilizar o crear funciones auxiliares necesarias para manejar peticiones HTTP al banco.
    Templates : Dise√±ar nuevas plantillas HTML seg√∫n los requerimientos funcionales y visuales.
     

üîÅ Proceso a Implementar 
Deber√°s implementar el siguiente flujo de integraci√≥n con el banco oficial simulado , siguiendo estos pasos secuenciales: 
    Obtenci√≥n del Token  
        Usar la ruta: URL_TOKEN = "api/token"
        Enviar usuario y contrase√±a para obtener un token v√°lido.
         
    Login Bancario  
        Usar la ruta: URL_LOGIN = "api/login"
        Autenticar sesi√≥n con el token obtenido previamente.
         
    Challenge OTP (One-Time Password)  
        Usar la ruta: URL_CHALLENGE = "api/challenge"
        Realizar el challenge de autenticaci√≥n 2FA mediante OTP.
         
    Env√≠o de Transferencia  
        Usar la ruta: URL_SEND_TRANSFER = "api/send-transfer"
        Ejecutar la transferencia con todos los campos requeridos del formulario original.
         
    Verificaci√≥n del Estado de la Transferencia  
        Usar la ruta: URL_STATUS_TRANSFER = "api/status-transfer"
        Consultar peri√≥dicamente el estado hasta obtener una respuesta definitiva del simulador.
         
    Transferencias Entrantes (Opcional/Adicional)  
        Usar la ruta: URL_TRANSFER_ENTRANTES = "api/transferencias/entrantes"
        Si aplica, integrar esta funcionalidad como parte del proceso.
         
‚úÖ Consideraciones Importantes 
    No omitir ning√∫n campo ya establecido en las vistas ni en los formularios actuales.
    Adaptar la l√≥gica nueva sin romper la funcionalidad actual.
    Mantener consistencia en nombres de variables, funciones y estilos de c√≥digo.
    Documentar cambios realizados para facilitar auditor√≠as futuras.
    Asegurar manejo de errores y estados transaccionales durante todo el proceso.
    Tienes que utilizar el dise√±o de las plantillas ya establecidas.
    
    


Eres un Ingeniero en Sistemas, Redes y Seguridad , especializado en desarrollo backend con Django  (sin Django REST Framework). Tu tarea es realizar una refactorizaci√≥n integral  del m√≥dulo de transferencias del sistema, enfoc√°ndote especialmente en el archivo conexion_banco_refactor.py. 

Tu objetivo es adaptar la l√≥gica existente  para permitir la comunicaci√≥n con un simulador bancario oficial , siguiendo todo el flujo de autenticaci√≥n, generaci√≥n de OTP mediante challenge, env√≠o de transferencias y verificaci√≥n de estado, manteniendo consistencia con el dise√±o actual del proyecto. 
üîÅ Flujo de Trabajo a Implementar 

Deber√°s modificar e implementar los siguientes componentes: 

    Views (views.py) 
    Actualiza y reestructura las vistas relacionadas con transferencias, especialmente def send_transfer_view, para incluir: 
        Inicio de sesi√≥n con usuario y contrase√±a.
        Generaci√≥n y resoluci√≥n de challenge OTP.
        Env√≠o de la transferencia.
        Consulta del estado de la transferencia.
         

    Utils (utils.py) 
    Crea funciones auxiliares para: 
        Gesti√≥n de sesiones seguras con el simulador.
        Encriptaci√≥n/desencriptaci√≥n si es necesario.
        Manejo de errores HTTP y respuestas del simulador.
        Simulaci√≥n DNS din√°mico y obtenci√≥n de IP del servidor.
         

    Templates (templates/api/gpt4/...) 
    Dise√±a nuevas plantillas HTML que: 
        Muestren el estado de cada paso del proceso.
        Permitan al usuario resolver el challenge OTP.
        Muestren confirmaci√≥n visual de √©xito o error.
        Se integren con el estilo y dise√±o ya implementado en el proyecto.
         
     

üåê URLs del Simulador Bancario 

Utiliza las siguientes rutas definidas en el entorno de prueba:
URL_TOKEN = "api/token"
URL_LOGIN = "api/login"
URL_CHALLENGE = "api/challenge"
URL_TRANSFER_ENTRANTES = "api/transferencias/entrantes"
URL_SEND_TRANSFER = "api/send-transfer"
URL_STATUS_TRANSFER = "api/status-transfer"

üõ°Ô∏è Requisitos T√©cnicos y de Seguridad 

    Simulaci√≥n DNS Din√°mico  
        Implementa l√≥gica para simular una conexi√≥n DNS real.
        Obtiene din√°micamente la direcci√≥n IP del servidor del banco simulado.
         

    Autenticaci√≥n Oficial  
        Realiza login usando credenciales predefinidas (usuario y contrase√±a).
        Almacena tokens de sesi√≥n de forma segura.
         

    Challenge OTP  
        Llama al endpoint /challenge para generar un token OTP.
        Presenta el challenge al usuario en una nueva template.
        Valida la respuesta antes de proceder con la transferencia.
         

    Manejo de Estado de Transferencia  
        Una vez enviada la transferencia, consulta peri√≥dicamente el estado usando /status-transfer.
        Muestra el resultado final en pantalla o redirige seg√∫n corresponda.

üìÇ Estructura Recomendada de Archivos 
api/
‚îú‚îÄ‚îÄ views.py
‚îú‚îÄ‚îÄ utils.py
‚îî‚îÄ‚îÄ templates/
    ‚îî‚îÄ‚îÄ gpt4/
        ‚îú‚îÄ‚îÄ login_bancario.html
        ‚îú‚îÄ‚îÄ challenge_otp.html
        ‚îú‚îÄ‚îÄ confirmacion_transferencia.html
        ‚îú‚îÄ‚îÄ estado_transferencia.html
        ‚îî‚îÄ‚îÄ ... (otras necesarias)

‚úÖ Consideraciones Finales 

    Mant√©n la coherencia con el estilo de c√≥digo existente en el proyecto.
    Documenta claramente cualquier cambio importante o funci√≥n cr√≠tica.
    Aseg√∫rate de no omitir ning√∫n campo ni paso del proceso original.
    Usa variables y nombres de funciones claros y descriptivos.
    Prioriza la seguridad en cada paso del proceso de autenticaci√≥n y transferencia.
