Resumen

1. Generación y uso de tokens

api_login.py define emitir_jwt_simulador y login_api_simulador para autenticar a un usuario y producir un JWT válido por una hora

Views.py incluye generar_token, que verifica las credenciales de los usuarios y los problemas de un token con una expiración de dos horas

Middleware (jwt_auth.py) valida el encabezado de autorización, verifica el token y almacena la carga útil decodificada en request.user_jwt para su uso en puntos finales


2. Transferencia de punto final

Cear_Transferencia (en Views.py) espera un JWT válido (establecido por el middleware), recupera el monto y el destino de la carga útil JSON, y registra la transferencia simulada en la base de datos.Devuelve un estado JSON simple sobre el éxito


3. Interfaces y plantillas

Las plantillas incluyen un diseño base básico y formularios simples para el inicio de sesión, el registro y la transferencia.Por ejemplo, Transferencia.html utiliza el token CSRF de Django, pero no maneja la entrada OTP o muestra un desafío: la funcionalidad OTP parece ausente


4. Configuración del servicio (archivos de ejemplo)

Gunicorn ejecuta la aplicación Django en el puerto 9181, registrar archivos de acceso/error y habilitar la recarga para el desarrollo

Supervisor administra los procesos de Gunicorn y TOR, almacenando registros y habilitando el reinicio automático para Gunicorn (no para Tor)

Nginx proxies tráfico en el puerto 8080 a Gunicorn, reenvío de encabezados de IP de host y cliente

La configuración de TOR expone el puerto 9053/9054 localmente y publica un servicio de cebolla en el puerto 80 asignado a 9002

ReadMe proporciona instrucciones de implementación, rutas de muestra /etc. y contornos reglas Fail2Ban para protección básica y certbot para la configuración de HTTPS


5. Medio ambiente y dependencias

requisitos.txt Listas de Django, Gunicorn y paquetes opcionales como Python-Dotenv para la gestión de variables de entorno

No existe archivo .env en el repositorio;Las variables de entorno deben definirse en el servidor.Los datos confidenciales (por ejemplo, Secret_Key) están actualmente codificados en varios archivos.


6. Observaciones y recomendaciones

Falta Logic OTP: no hay código que genere o valida una contraseña única.Si se requiere OTP, se debe agregar un nuevo punto final o campo de formulario, y el flujo de token/transacción se ajusta.

Secretos codificados: Secret_Key aparece en Views.py y jwt_auth.py.Mueva estos valores a variables de entorno cargadas a través de Python-Dotenv o directamente desde el sistema operativo.

Registros en el repositorio: los archivos de registro grandes están presentes en registros/;En la producción deben rotarse y excluirse del control de versiones.

Configuraciones de muestra: proporcionados archivos de configuración ilustran cómo ejecutar Gunicorn, Supervisor, Nginx y Tor, pero utilizan rutas absolutas para referencias /Home/Markmur88/... Verifique que estas rutas coincidan con el entorno de producción y se ajusten a la propiedad correcta de usuarios/grupos.

Fail2Ban-ReadMe muestra una cárcel personalizada (Banco-Auth) que monitorea el registro del supervisor para las fallas de autenticación. Asegúrese de que los filtros estén en su lugar y los registros se escriban correctamente en /var/log/banco/banco_supervisor.log.

Renovación del certificado: las instrucciones CERTBOT se incluyen para HTTPS. Implemente la renovación automática con un trabajo cron o un temporizador Systemd.

Uso del puerto - Nginx escucha en 8080 en la configuración de la muestra. Si se combina con HTTPS u otros servicios, asegure que se eviten los conflictos de puertos y las reglas de firewall solo permitan los puertos requeridos.

Supervisor: la configuración establece un servidor HTTP INET en el puerto 9100. Limite el acceso a localhost o lo asegure con autenticación si no se necesita acceso remoto.


7. Flujo general (simplificado)

Autenticación: frontend publica credenciales del usuario a /API/Login/ o /API/Token. Backend Devuelve un JWT si las credenciales son válidas.

Uso del token: el cliente envía solicitudes autenticadas (por ejemplo, TO/API/Transferencia/ o Cear_Transferencia) con autorización: Bearer <Token>. El middleware valida el token.

Creación de transferencia: Backend extrae carga útil del token, verifica los datos de transferencia publicados, lo registra en Transferenciasimulada y responde con un estado JSON.

Comentarios del usuario: las plantillas de demostración simplemente redirigen o muestran un mensaje al éxito; La retroalimentación avanzada de la interfaz de usuario y el manejo de OTP deberían implementarse.

Al consolidar la configuración y garantizar que los secretos estén externalizados, agregando la lógica OTP faltante y manteniendo la configuración del servidor seguro (NGINX con SSL, Fail2Ban, Reinicias de supervisores, etc.), el simulador bancario se puede implementar de una manera más robusta y lista para la producción.